//Set user parameters
////Creating GUI for users to input values for calibration

Dialog.create("Welcome to the Coral Analysis Macro!");
Dialog.addMessage("Please indicate the following preferences before you begin:");

Dialog.addNumber("No. of fragments in image", 1);
Dialog.addNumber("No. of colour references for whole image", 1);

var min = 0;
var max = 6;
var default = 3;
Dialog.addSlider("SD for Colour Threshold", min, max, default);

Dialog.addCheckbox("Use 'Fill Holes' during analysis?", true);
Dialog.addCheckbox("1cm x 1cm square scale", true);
Dialog.addCheckbox("Coral colour", true);
Dialog.addCheckbox("Batch processing", true);


// Finally show the GUI, once all parameters have been added
Dialog.show();

// Once the Dialog is OKed the rest of the code is executed
// ie one can recover the values in order of appearance 
fragno = Dialog.getNumber(); 
colourno = Dialog.getNumber();
fillholescheck = Dialog.getCheckbox();
scalecheck = Dialog.getCheckbox();
colourcheck = Dialog.getCheckbox();
batchcheck = Dialog.getCheckbox();
sd= Dialog.getNumber();
roiManager("reset")
path = File.openDialog("Please select the first image you want to process");
open(path);


////// set ROIs for each frag for measuring area////
run("Select None");
for (frag=1; frag<=fragno; frag++) {
	setTool("rectangle");
	waitForUser("Select area to be measured for fragment "+(frag));
	roiManager("Add");
	fragindex=roiManager("size");
	roiManager("select", fragindex-1);
	roiManager("Rename", "Frag Measure "+(frag));
}
run("Select None");
for (colref=1; colref<=colourno; colref++){
	setTool("rectangle");
	waitForUser("Select area to retrieve colour values "+(colref));
	roiManager("Add");
	colrefindex=roiManager("size");
	roiManager("select", colrefindex-1);
	roiManager("Rename", "Colour Measure "+(colref));
}
///////////////////SET SCALE//////////////////////////////////
if (scalecheck==true){
		onecmsquarescale();
}
else{
	//Prompt to manually set scale
	run("Select None");
	run("Set Scale...", "distance=0 known=0 unit=pixel global");
	setTool("line");
	waitForUser("Please manually set your scale");
	setOption("Changes", false);
}
//////////////////////////////////////////////////////////
///////////////////Colour Thresholding////////////////////
for (colref=1; colref<=colourno; colref++){
	setBatchMode(true);
	original = getImageID();
	title=getTitle();
	resultlabel=title+": Frag "+(colref);
	colourscore= findRoiWithName("Colour Measure "+(colref));
	roiManager("select", colourscore);
	//Getting colour grey values
	run("Duplicate...", "title=RGBstack ignore");
	run("Split Channels");
	selectWindow("RGBstack (red)");
	roiManager("Select", colourscore);
	roiManager("Measure");
	redgrayvalue=getResult("Mean");
	redstddev=getResult("StdDev");
	close();
	
	
	selectWindow("RGBstack (green)");
	roiManager("Select", colourscore);
	roiManager("Measure");
	greengrayvalue=getResult("Mean");
	greenstddev=getResult("StdDev");
	close();
	
	
	selectWindow("RGBstack (blue)");
	roiManager("Select", colourscore);
	roiManager("Measure");
	bluegrayvalue=getResult("Mean");
	bluestddev=getResult("StdDev");
	close();
	
	Table.deleteRows( nResults-3, nResults-1 );
	
	redmin=redgrayvalue-redstddev*sd;
	redmax=redgrayvalue+redstddev*sd;
	greenmin=greengrayvalue-greenstddev*sd;
	greenmax=greengrayvalue+greenstddev*sd;
	bluemin=bluegrayvalue-bluestddev*sd;
	bluemax=bluegrayvalue+bluestddev*sd;
	
	//Colour threshold mask (SD1)
	selectImage(original);
	run("Select None");
	run("Duplicate...", "title=ColourThresholdMask");
	selectImage("ColourThresholdMask");
	
	//FROM COLOUR THRESHOLD WINDOW'S MACRO BUTTON!
	// Colour Thresholding-------------
	// Color Thresholder 2 .3.0/1.53s
	// Autogenerated macro, single images only!
	min=newArray(3);
	max=newArray(3);
	filter=newArray(3);
	a=getTitle();
	run("RGB Stack");
	run("Convert Stack to Images");
	selectWindow("Red");
	rename("0");
	selectWindow("Green");
	rename("1");
	selectWindow("Blue");
	rename("2");
	
	min[0]=redmin;
	max[0]=redmax;
	filter[0]="pass";
	min[1]=greenmin;
	max[1]=greenmax;
	filter[1]="pass";
	min[2]=bluemin;
	max[2]=bluemax;
	filter[2]="pass";
	for (i=0;i<3;i++){
	  selectWindow(""+i);
	  setThreshold(min[i], max[i]);
	  run("Convert to Mask");
	  if (filter[i]=="stop")  run("Invert");
	}
	imageCalculator("AND create", "0","1");
	imageCalculator("AND create", "Result of 0","2");
	for (i=0;i<3;i++){
	  selectWindow(""+i);
	  close();
	}
	selectWindow("Result of 0");
	close();
	selectWindow("Result of Result of 0");
	rename(a);
	// End of Colour Thresholding-------------
	// Convert to Mask and get surface area of frag
	run("Convert to Mask");
	if (fillholescheck=="true"){
		run("Fill Holes");
	}
	fragm=findRoiWithName("Frag Measure "+(colref));
	roiManager("Select", fragm);
	run("Analyze Particles...", "size=0.1-Infinity display");
	if (fragno>=2){
	setResult("Label",nResults-1,resultlabel);}
	else{
	setResult("Label",nResults-1,title);}
	close();
}
setBatchMode(false);


/////////////////////Set colour ROIs//////////////////////////
if (colourcheck==true){
	//Setting up colour chart ROIs 
		run("Select None");
		selectImage(original);
		for (c=6; c>=1; c--) {
				setTool("rectangle");
				waitForUser("Select an area of colour score "+c);
				roiManager("Add");
				colourindex=roiManager("size");
				roiManager("select", colourindex-1);
				roiManager("Rename", "Colour "+c);			
		}
		coralcolourscore();
}


/////////////////////////////////////////////////////////////


//Batch processing portion: Retrieving the selected file directory, selected file name and setting the number of times to open next image
if (batchcheck==true){	
	dir=File.getParent(path);
	firstfile=File.getName(path);
	list = getFileList(dir);
	Array.sort(list);
	imageindex = index(list,firstfile);
	setBatchMode(true);
 // number of times you want to Open Next image
 	diff=list.length-imageindex-1;
 	 for(listnumber=1; listnumber<=diff; listnumber++){
 		run("Open Next");
 
//Batch mode scale: If user chooses to use the 1cm square as scale reference (without user input prompt)
		if (scalecheck==true){
		//Clear any existing scale
		run("Select None");
		run("Set Scale...", "distance=0 known=0 unit=pixel global");
		//Create mask from 8bit image and measure area of 1cmx1cm square
		original = getImageID();
		selectImage(original);
		run("Duplicate...", "title=8bitmask ignore");
		selectImage("8bitmask");
		run("8-bit");
		run("Convert to Mask");
		run("Set Measurements...", "area mean standard min limit display redirect=None decimal=3");
		squarescale= findRoiWithName("1cm x 1cm square");
		roiManager("select", squarescale);
		run("Measure");
		selectImage("8bitmask");
		close();
		//Area of the 1cmx1cm square converted into 1cm distance in pixels
		blacksquarearea=getResult("Area");
		onecmdistance=sqrt(blacksquarearea);
		//Setting scale with 1cm distance in pixels
		selectImage(original);
		run("Set Scale...", "distance=onecmdistance known=1 unit=cm global");
		Table.deleteRows( nResults-1, nResults-1 );
		}

//Batch mode measure: Looks for Frag Measure ROIs and measures with colour threshold
		for (colref=1; colref<=colourno; colref++){
		original = getImageID();
		title=getTitle();
		resultlabel=title+": Frag "+(colref);
		colourscore= findRoiWithName("Colour Measure "+(colref));
		roiManager("select", colourscore);
		//Getting colour grey values
		run("Duplicate...", "title=RGBstack ignore");
		run("Split Channels");
		selectWindow("RGBstack (red)");
		roiManager("Select", colourscore);
		roiManager("Measure");
		redgrayvalue=getResult("Mean");
		redstddev=getResult("StdDev");
		close();
		
		selectWindow("RGBstack (green)");
		roiManager("Select", colourscore);
		roiManager("Measure");
		greengrayvalue=getResult("Mean");
		greenstddev=getResult("StdDev");
		close();
			
		selectWindow("RGBstack (blue)");
		roiManager("Select", colourscore);
		roiManager("Measure");
		bluegrayvalue=getResult("Mean");
		bluestddev=getResult("StdDev");
		close();
			
		Table.deleteRows( nResults-3, nResults-1 );					
		
		redmin=redgrayvalue-redstddev*sd;
		redmax=redgrayvalue+redstddev*sd;
		greenmin=greengrayvalue-greenstddev*sd;
		greenmax=greengrayvalue+greenstddev*sd;
		bluemin=bluegrayvalue-bluestddev*sd;
		bluemax=bluegrayvalue+bluestddev*sd;
		
		//Colour threshold mask (SD1)
		selectImage(original);
		run("Select None");
		run("Duplicate...", "title=ColourThresholdMask");
		selectImage("ColourThresholdMask");
		
		//FROM COLOUR THRESHOLD WINDOW'S MACRO BUTTON!
		// Colour Thresholding-------------
		// Color Thresholder 2 .3.0/1.53s
		// Autogenerated macro, single images only!
		min=newArray(3);
		max=newArray(3);
		filter=newArray(3);
		a=getTitle();
		run("RGB Stack");
		run("Convert Stack to Images");
		selectWindow("Red");
		rename("0");
		selectWindow("Green");
		rename("1");
		selectWindow("Blue");
		rename("2");
		
		min[0]=redmin;
		max[0]=redmax;
		filter[0]="pass";
		min[1]=greenmin;
		max[1]=greenmax;
		filter[1]="pass";
		min[2]=bluemin;
		max[2]=bluemax;
		filter[2]="pass";
		for (i=0;i<3;i++){
		  selectWindow(""+i);
		  setThreshold(min[i], max[i]);
		  run("Convert to Mask");
		  if (filter[i]=="stop")  run("Invert");
		}
		imageCalculator("AND create", "0","1");
		imageCalculator("AND create", "Result of 0","2");
		for (i=0;i<3;i++){
		  selectWindow(""+i);
		  close();
		}
		selectWindow("Result of 0");
		close();
		selectWindow("Result of Result of 0");
		rename(a);
		// End of Colour Thresholding-------------
		// Convert to Mask and get surface area of frag
		run("Convert to Mask");
		if (fillholescheck=="true"){
		run("Fill Holes");
	}
		fragm=findRoiWithName("Frag Measure "+(colref));
		roiManager("Select", fragm);
		run("Analyze Particles...", "size=0.1-Infinity display");;
		if (fragno>1){
		setResult("Label",nResults-1,resultlabel);}
		else{
		setResult("Label",nResults-1,title);}
		close();
}

// Batch mode colour: If colour is selected, obtain colour gray values for reference of colour measures 
 		if (colourcheck==true){
 		coralcolourscore();	
 	}
		setOption("Changes", false);
}
}		
// end of batch mode

//Delete off unnecessary tables
Table.deleteColumn("Mean");
Table.deleteColumn("StdDev");
Table.deleteColumn("Min");
Table.deleteColumn("Max");
Table.deleteColumn("MinThr");
Table.deleteColumn("MaxThr");

//Export data to new Excel file/add to existing Excel file
export=getBoolean("Would you like to export your results to an Excel file?");
if (export==true){
	Dialog.create("Export to Excel file");
	Dialog.addHelp("https://imagej.net/plugins/read-and-write-excel#usage");
	items = newArray("Add to existing Excel file", "Create new Excel file");
  	Dialog.addRadioButtonGroup(" ", items, 1, 2, "Add to existing Excel file");
  	Dialog.addMessage("Note: The Read and Write Excel plugin is required, click Help for an installation guide");
	Dialog.show();
	addorcreate=Dialog.getRadioButton();
	
	//Add to existing Excel file
	if (addorcreate=="Add to existing Excel file"){
	Dialog.create("Add to existing Excel file");	
	Dialog.addFile("Excel file path:", "Enter your Excel file path here");
	Dialog.addString("Sheet Name:", "Sheet1",31);
	Dialog.addString("Data label:", " ");
	Dialog.addCheckbox("Include Count number?", false);
	items= newArray("Adjacent to existing data", "Under existing data");
	Dialog.addRadioButtonGroup("Where do you want to append your data?", items, 1, 2, "Adjacent to existing data");	
	Dialog.addMessage("Warning: Ensure that the Excel file you selected above is not open before proceeding!");
	Dialog.show();
	excelfilepath=Dialog.getString();
	sheetpath=Dialog.getString();
	datalabel=Dialog.getString();
	countnumber=Dialog.getCheckbox();
	stackornot=Dialog.getRadioButton();
	//Replacing \ with / to fit Read and Write excel syntax
	correctedexcel=replace(excelfilepath,"\\", "/");
	//fitting user inputs into Read and Write excel syntax
	ReadandWriteExcelsyntax="file=["+correctedexcel+"] "+"sheet="+sheetpath+" dataset_label=["+datalabel+"]";
	if (countnumber==false){
		ReadandWriteExcelsyntax=ReadandWriteExcelsyntax+" no_count_column";
	}
	if (stackornot=="Under existing data"){
		ReadandWriteExcelsyntax=ReadandWriteExcelsyntax+" stack_results";
	}
	run("Read and Write Excel", ReadandWriteExcelsyntax);
	Dialog.create(" ");
	Dialog.addMessage("Your analysis is complete, thank you for using this macro!");
	Dialog.show();
	}
	
	//Create a new Excel file
	else{
	Dialog.create("Create a new Excel file");	
	Dialog.addDirectory("New Excel file directory:", "Enter the directory for your new Excel file here");
	Dialog.addString("New Excel file name:", "Coral surface area and colour data",48);
	Dialog.addString("Sheet Name:", "Sheet1",48);
	Dialog.addString("Data label:", " ");
	Dialog.addCheckbox("Include Count number?", false);	
	Dialog.show();
	excelfiledir=Dialog.getString();
	excelfilename=Dialog.getString();
	sheetpath=Dialog.getString();
	datalabel=Dialog.getString();
	countnumber=Dialog.getCheckbox();
	excelfilepath=excelfiledir+excelfilename+".xlsx";
	//Replacing \ with / to fit Read and Write excel syntax
	correctedexcel=replace(excelfilepath,"\\", "/");
	//fitting user inputs into Read and Write excel syntax
	ReadandWriteExcelsyntax="file=["+correctedexcel+"] "+"sheet="+sheetpath+" dataset_label=["+datalabel+"]";
	if (countnumber==false){
		ReadandWriteExcelsyntax=ReadandWriteExcelsyntax+" no_count_column";
	}
	
	run("Read and Write Excel", ReadandWriteExcelsyntax);
	Dialog.create(" ");
	Dialog.addMessage("Your analysis is complete, thank you for using this macro!");
	Dialog.show();
	}	
}


else{
	Dialog.create(" ");
	Dialog.addMessage("Your analysis is complete, thank you for using this macro! Please refer to the Results table for the results.");
	Dialog.show();
}
//
	




//Function for setting scale using a black 1x1cm square as reference (with user input for ROI prompt)
function onecmsquarescale(){
		//Clear any existing scale
		run("Select None");
		run("Set Scale...", "distance=0 known=0 unit=pixel global");
		//Setting up ROI for 1cm x 1cm square
		setTool("rectangle");
		waitForUser("Please select your 1cm x 1cm square");
		roiManager("Add");
		setBatchMode(true);
		scaleindex=roiManager("size");
		roiManager("select", scaleindex-1);
		roiManager("Rename", "1cm x 1cm square");		
		//Create mask from 8bit image and measure area of 1cmx1cm square
		original = getImageID();
		selectImage(original);
		setOption("Changes", false);
		run("Duplicate...", "title=8bitmask ignore");
		selectImage("8bitmask");
		run("8-bit");
		run("Convert to Mask");
		run("Set Measurements...", "area mean standard min limit display redirect=None decimal=3");
		squarescale= findRoiWithName("1cm x 1cm square");
		roiManager("select", squarescale);
		run("Measure");
		selectImage("8bitmask");
		close();
		//Area of the 1cmx1cm square converted into 1cm distance in pixels
		blacksquarearea=getResult("Area");
		onecmdistance=sqrt(blacksquarearea);
		//Setting scale with 1cm distance in pixels
		selectImage(original);
		run("Set Scale...", "distance=onecmdistance known=1 unit=cm global");
		Table.deleteRows( nResults-1, nResults-1 );
		setOption("Changes", false);
		setBatchMode(false);	
}

//Function for finding Colour chart ROIs and Colour measure ROIs, and estimating a colour value for each colour measure
function coralcolourscore(){		
		setBatchMode(true);
		colour6ind= findRoiWithName("Colour 6");
		roiManager("Select", colour6ind);
		roiManager("Measure");
		colour6=getResult("Mean");


		colour5ind= findRoiWithName("Colour 5");
		roiManager("Select", colour5ind);
		roiManager("Measure");
		colour5=getResult("Mean");


		colour4ind= findRoiWithName("Colour 4");
		roiManager("Select", colour4ind);
		roiManager("Measure");
		colour4=getResult("Mean");

		colour3ind= findRoiWithName("Colour 3");
		roiManager("Select", colour3ind);
		roiManager("Measure");
		colour3=getResult("Mean");


		colour2ind= findRoiWithName("Colour 2");
		roiManager("Select", colour2ind);
		roiManager("Measure");
		colour2=getResult("Mean");

		
		colour1ind= findRoiWithName("Colour 1");
		roiManager("Select", colour1ind);
		roiManager("Measure");
		colour1=getResult("Mean");

		Table.deleteRows( nResults-6, nResults-1 );
		
		
		//Approximating colour scores to the midway point to the next colour score
		col6est=colour6+((colour5-colour6)/2);
		col5est=colour5+((colour4-colour5)/2);
		col4est=colour4+((colour3-colour4)/2);
		col3est=colour3+((colour2-colour3)/2);
		col2est=colour2+((colour1-colour2)/2);


		//Setting up ROIs and measuring colour for the number of colour references set by user
		run("Select None");
		for (colref=1; colref<=colourno; colref++){
			colourscore= findRoiWithName("Colour Measure "+(colref));
			roiManager("select", colourscore);
			roiManager("Measure");
			colour=getResult("Mean");
			if (colour<col6est)
				colresult=6;
			else if(colour<col5est)
				colresult=5;
			else if(colour<col4est)
				colresult=4;				
			else if(colour<col3est)
				colresult=3;
			else if(colour<col2est)
				colresult=2;
			else if(colour<colour1)
				colresult=1;
			else 
				colresult="Error";
			Table.deleteRows( nResults-1, nResults-1 );
			setResult("Colour", nResults-(1+fragno-(colref)), colresult);
			updateResults();
 		}
}



//Function for looking up Roi by name and returning its index number (RoiManager.selectByName(name) for newer imageJ versions)
function findRoiWithName(roiName) { 
	nR = roiManager("Count"); 
 
	for (i=0; i<nR; i++) { 
		roiManager("Select", i); 
		rName = Roi.getName(); 
		if (matches(rName, roiName)) { 
			return i; 
		} 
	} 
	return -1; 
} 


//Function to retrieve index number of a string/number from an array
  function index(a, value) { 
      for (i=0; i<a.length; i++) 
      if (a[i]==value) return i; 
  return -1; 
 }