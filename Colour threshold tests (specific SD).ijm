macro "Colour tests" {

original = getImageID();

onecmsquarescale();
//Make sure mask uses inverting LUT
run("Options...", "iterations=1 count=1");

Dialog.create("Calibration");
Dialog.addMessage("Please indicate the following preferences before batch processing:");

Dialog.addNumber("No. of fragments in image", 0);
Dialog.addNumber("SD", 0);


// Finally show the GUI, once all parameters have been added
Dialog.show();

// Once the Dialog is OKed the rest of the code is executed
// ie one can recover the values in order of appearance 
fragno = Dialog.getNumber(); 
sd = Dialog.getNumber();

//Setting up ROIs
roiManager("Reset");
setTool("rectangle");
waitForUser("Colour");
roiManager("Add");
roiManager("Select", 0);
roiManager("Rename", "Colour")

for (fragref=0; fragref<fragno; fragref++){
	run("Select None");
	setTool("rectangle");
	waitForUser("Rectangle for frag measure "+(fragref+1));
	roiManager("Add");
	roiManager("Select", fragref+1);
	roiManager("Rename", "Frag Measure "+(fragref+1));
}




//Getting colour grey values
selectImage(original);
run("Duplicate...", "title=RGBstack ignore");
run("Split Channels");
selectWindow("RGBstack (red)");
roiManager("Select", 0);
roiManager("Measure");
redgrayvalue=getResult("Mean");
redstddev=getResult("StdDev");
close();

selectWindow("RGBstack (green)");
roiManager("Select", 0);
roiManager("Measure");
greengrayvalue=getResult("Mean");
greenstddev=getResult("StdDev");
close();

selectWindow("RGBstack (blue)");
roiManager("Select", 0);
roiManager("Measure");
bluegrayvalue=getResult("Mean");
bluestddev=getResult("StdDev");
close();

run("Select None");


redmin=redgrayvalue-redstddev*sd;
redmax=redgrayvalue+redstddev*sd;
greenmin=greengrayvalue-greenstddev*sd;
greenmax=greengrayvalue+greenstddev*sd;
bluemin=bluegrayvalue-bluestddev*sd;
bluemax=bluegrayvalue+bluestddev*sd;
//Colour threshold mask (SD1)
selectImage(original);
run("Select None");
run("Duplicate...", "title=ColourThresholdMask");
selectImage("ColourThresholdMask");
rename("SD"+sd);

//FROM COLOUR THRESHOLD WINDOW'S MACRO BUTTON!
// Colour Thresholding-------------
// Color Thresholder 2 .3.0/1.53s
// Autogenerated macro, single images only!
min=newArray(3);
max=newArray(3);
filter=newArray(3);
a=getTitle();
run("RGB Stack");
run("Convert Stack to Images");
selectWindow("Red");
rename("0");
selectWindow("Green");
rename("1");
selectWindow("Blue");
rename("2");

min[0]=redmin;
max[0]=redmax;
filter[0]="pass";
min[1]=greenmin;
max[1]=greenmax;
filter[1]="pass";
min[2]=bluemin;
max[2]=bluemax;
filter[2]="pass";
for (i=0;i<3;i++){
  selectWindow(""+i);
  setThreshold(min[i], max[i]);
  run("Convert to Mask");
  if (filter[i]=="stop")  run("Invert");
}
imageCalculator("AND create", "0","1");
imageCalculator("AND create", "Result of 0","2");
for (i=0;i<3;i++){
  selectWindow(""+i);
  close();
}
selectWindow("Result of 0");
close();
selectWindow("Result of Result of 0");
rename(a);
// Colour Thresholding-------------
run("Convert to Mask");


selectImage("SD"+sd);

for (frag=0; frag<fragno; frag++){
	roiManager("Select", frag+1);
	run("Fill Holes");
	run("Analyze Particles...", "size=0.1-Infinity display");}
run("Set Measurements...", "area limit redirect=None decimal=3");


//Function for setting scale using a black 1x1cm square as reference (with user input for ROI prompt)
function onecmsquarescale(){
		//Clear any existing scale
		run("Select None");
		run("Set Scale...", "distance=0 known=0 unit=pixel global");
		//Setting up ROI for 1cm x 1cm square
		setTool("rectangle");
		waitForUser("Please select your 1cm x 1cm square");
		roiManager("Add");
		setBatchMode(true);
		scaleindex=roiManager("size");
		roiManager("select", scaleindex-1);
		roiManager("Rename", "1cm x 1cm square");		
		//Create mask from 8bit image and measure area of 1cmx1cm square
		original = getImageID();
		selectImage(original);
		setOption("Changes", false);
		run("Duplicate...", "title=8bitmask ignore");
		selectImage("8bitmask");
		run("8-bit");
		run("Convert to Mask");
		run("Set Measurements...", "area mean standard min limit display redirect=None decimal=3");
		squarescale= findRoiWithName("1cm x 1cm square");
		roiManager("select", squarescale);
		run("Measure");
		selectImage("8bitmask");
		close();
		//Area of the 1cmx1cm square converted into 1cm distance in pixels
		blacksquarearea=getResult("Area");
		onecmdistance=sqrt(blacksquarearea);
		//Setting scale with 1cm distance in pixels
		selectImage(original);
		run("Set Scale...", "distance=onecmdistance known=1 unit=cm global");
		Table.deleteRows( nResults-1, nResults-1 );
		setOption("Changes", false);
		setBatchMode(false);	
}

//Function for looking up Roi by name and returning its index number (RoiManager.selectByName(name) for newer imageJ versions)
function findRoiWithName(roiName) { 
	nR = roiManager("Count"); 
 
	for (i=0; i<nR; i++) { 
		roiManager("Select", i); 
		rName = Roi.getName(); 
		if (matches(rName, roiName)) { 
			return i; 
		} 
	} 
	return -1; 
} 

